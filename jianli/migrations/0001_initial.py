# Generated by Django 2.2.3 on 2019-07-25 15:03

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('age', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'author',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('author', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'books',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('post_title', models.CharField(blank=True, max_length=255, null=True)),
                ('post_time', models.DateTimeField(blank=True, null=True)),
                ('post_comm', models.CharField(blank=True, max_length=255, null=True)),
                ('post_img', models.CharField(max_length=255)),
                ('post_text', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'post',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stopwords',
            fields=[
                ('rid', models.AutoField(db_column='RID', primary_key=True, serialize=False)),
                ('words', models.CharField(blank=True, db_column='Words', max_length=50, null=True)),
                ('words_type', models.IntegerField(db_column='Words_Type')),
                ('isdelete', models.IntegerField(db_column='isDelete')),
            ],
            options={
                'db_table': 'stopwords',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tasklist',
            fields=[
                ('rid', models.AutoField(db_column='RID', primary_key=True, serialize=False)),
                ('task_name', models.CharField(blank=True, db_column='Task_Name', max_length=100, null=True)),
                ('task_url_from', models.CharField(blank=True, db_column='Task_URL_from', max_length=500, null=True)),
                ('task_language', models.IntegerField(blank=True, db_column='Task_Language', null=True)),
                ('task_infotype', models.IntegerField(blank=True, db_column='Task_InfoType', null=True)),
                ('task_pagetype', models.IntegerField(blank=True, db_column='Task_PageType', null=True)),
                ('task_iscrawlall', models.IntegerField(blank=True, db_column='Task_isCrawlAll', null=True)),
                ('task_isproxy', models.IntegerField(blank=True, db_column='Task_isProxy', null=True)),
                ('task_bingfa', models.IntegerField(blank=True, db_column='Task_bingfa', null=True)),
                ('task_jiange', models.IntegerField(blank=True, db_column='Task_Jiange', null=True)),
                ('task_crawltype', models.IntegerField(blank=True, db_column='Task_CrawlType', null=True)),
                ('task_level', models.IntegerField(blank=True, db_column='Task_Level', null=True)),
                ('task_deep', models.IntegerField(blank=True, db_column='Task_Deep', null=True)),
                ('task_db_type', models.CharField(blank=True, db_column='Task_DB_Type', max_length=50, null=True)),
                ('task_db_host', models.CharField(blank=True, db_column='Task_DB_Host', max_length=50, null=True)),
                ('task_db_name', models.CharField(blank=True, db_column='Task_DB_Name', max_length=50, null=True)),
                ('task_db_uid', models.CharField(blank=True, db_column='Task_DB_UID', max_length=50, null=True)),
                ('task_db_pwd', models.CharField(blank=True, db_column='Task_DB_Pwd', max_length=50, null=True)),
                ('task_rule_domain_included', models.CharField(blank=True, db_column='Task_Rule_Domain_Included', max_length=300, null=True)),
                ('task_rule_domain_excluded', models.CharField(blank=True, db_column='Task_Rule_Domain_Excluded', max_length=300, null=True)),
                ('task_rule_dir_included', models.CharField(blank=True, db_column='Task_Rule_DIR_Included', max_length=300, null=True)),
                ('task_rule_dir_excluded', models.CharField(blank=True, db_column='Task_Rule_DIR_Excluded', max_length=300, null=True)),
                ('task_rule_file_included', models.CharField(blank=True, db_column='Task_Rule_file_Included', max_length=300, null=True)),
                ('task_rule_file_excluded', models.CharField(blank=True, db_column='Task_Rule_file_Excluded', max_length=300, null=True)),
                ('task_rule_replace', models.CharField(blank=True, db_column='Task_Rule_Replace', max_length=300, null=True)),
                ('task_rule_cut', models.CharField(blank=True, db_column='Task_Rule_Cut', max_length=300, null=True)),
                ('task_rule_filter', models.CharField(blank=True, db_column='Task_Rule_filter', max_length=1000, null=True)),
                ('task_stat', models.IntegerField(blank=True, db_column='Task_stat', null=True)),
                ('task_time_post', models.DateTimeField(db_column='Task_Time_post')),
                ('task_time_start', models.DateTimeField(db_column='Task_Time_start')),
                ('task_time_end', models.DateTimeField(db_column='Task_Time_end')),
                ('task_isxpath', models.IntegerField(blank=True, db_column='Task_isXpath', null=True)),
                ('task_xpath_content', models.CharField(blank=True, db_column='Task_Xpath_Content', max_length=300, null=True)),
                ('task_xpath_breadcrumbs', models.CharField(blank=True, db_column='Task_Xpath_Breadcrumbs', max_length=300, null=True)),
                ('task_xpath_answers', models.CharField(blank=True, db_column='Task_Xpath_Answers', max_length=300, null=True)),
            ],
            options={
                'db_table': 'tasklist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visitor_name', models.CharField(blank=True, max_length=255, null=True)),
                ('visitor_email', models.CharField(blank=True, max_length=255, null=True)),
                ('visitor_text', models.CharField(blank=True, max_length=255, null=True)),
                ('visitor_context', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'visitor',
                'managed': False,
            },
        ),
    ]
